#!/bin/bash
# ╭──────────────────────────────────────────────────────────────────────────────╮
# │                                                                              │
# │           Volume-Dump. An extension of the Vackup tool which also            │
# │               Allows for MySQL Dumps to be backed up as well.                │
# │                     Inspired by Bret Fishers Vackup tool                     │
# │                                                                              │
# ╰──────────────────────────────────────────────────────────────────────────────╯

# ╭──────────────────────────────────────────────────────────╮
# │                       Set Defaults                       │
# ╰──────────────────────────────────────────────────────────╯

# set -o errexit                                              # If a command fails bash exits.
set -Eeo pipefail                                             # pipeline fails on one command.
if [[ "${DEBUG-0}" == "1" ]]; then set -o xtrace; fi          # DEBUG=1 will show debugging.


# ╭──────────────────────────────────────────────────────────╮
# │                        VARIABLES                         │
# ╰──────────────────────────────────────────────────────────╯


# ╭──────────────────────────────────────────────────────────╮
# │                      Trap Functions                      │
# ╰──────────────────────────────────────────────────────────╯

# Remove the backup.sql file on exit.
trap "rm -f ./backup.sql" EXIT

# ╭──────────────────────────────────────────────────────────╮
# │                          Usage.                          │
# ╰──────────────────────────────────────────────────────────╯

usage()
{
    if [ "$#" -lt 2 ]; then


        printf "🚚 Volume Dump\n\n"

        printf "Docker Volume backup/recovery, import and export tool that includes MySQL databases.\n\n"

        printf "export/import copies files between a host tarball and a volume. For making volume backups and restores.\n\n"
        printf "save/load copies files from the volume into a container which then is made into a new image for commiting to registry.\n\n"
        printf "dbsave/dbload creates a Mysqldump file from the database into a container and is then made into an image for the registry.\n\n"

        cat <<EOF
┌────────┐                 ┌────────────────────────┐ 
│        │◀──── export ────│                        │ 
│   ./   │                 │         volume         │ 
│        │───── import ───▶│                        │ 
└────────┘                 └────────────────────────┘ 
                              │     │       ▲     ▲   
                             save dbsave    │     │   
                              │     │    dbload  load  
                              ▼     ▼       │     │   
                           ┌────────────────────────┐ 
                           │   busybox container    │ 
                           │      /volume-data      │ 
                           └────────────────────────┘ 
                                 │             ▲      
                                 ▼             │      
                           ┌────────────────────────┐ 
                           │  Image  of container   │ 
                           └────────────────────────┘ 
EOF
        printf "\n\n"

        exit 1
    fi
}


# ╭──────────────────────────────────────────────────────────╮
# │         Take the arguments from the command line         │
# ╰──────────────────────────────────────────────────────────╯
function arguments()
{
    POSITIONAL_ARGS=()

    while [[ $# -gt 0 ]]; do
    case $1 in

    
        -e|--export)
            COMMAND="export"
            shift
            shift
            ;;


        -i|--import)
            COMMAND="import"
            shift
            shift
            ;;


        -s|--save)
            COMMAND="save"
            shift
            shift
            ;;


        -l|--load)
            COMMAND="load"
            shift
            shift
            ;;


        -ds|--dbsave)
            COMMAND="dbsave"
            shift
            shift
            ;;


        -dl|--dbload)
            COMMAND="dbload"
            shift
            shift
            ;;


        -V|--volume)
            VOLUME="$2"
            shift
            shift
            ;;


        -C|--container)
            CONTAINER="$2"
            shift
            shift
            ;;


        -I|--image)
            IMAGE="$2"
            shift
            shift
            ;;


        -F|--filename)
            IMAGE="$2"
            shift
            shift
            ;;


        -d|--database)
            IMAGE="$2"
            shift
            shift
            ;;


        -u|--dbuser)
            IMAGE="$2"
            shift
            shift
            ;;


        -p|--dbpass)
            IMAGE="$2"
            shift
            shift
            ;;


        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;


        *)
            POSITIONAL_ARGS+=("$1") # save positional arg back onto variable
            shift                   # remove argument and shift past it.
            ;;
    esac
    done
    
}


# ╭──────────────────────────────────────────────────────────╮
# │                          EXPORT                          │
# ╰──────────────────────────────────────────────────────────╯
#
# 1. Create a BUSYBOX container
# 2. mount volume to    /vackup-volume
# 3. mount $pwd to      /vackup
# 4. create tar.gz of volume into $pwd
#                                ┌──────────────────────┐
# ┌────────────────┐             │ ┌────────────────┐   │
# │       ./       │────mount────┼▶│    /vackup     │   │
# └────────────────┘             │ └──────────────▲─┘   │
#                                │                │     │
#                                │ busybox       tar -c │
#                                │                │     │
# ┌────────────────┐             │ ┌──────────────┴─┐   │
# │     volume     │────mount────┼▶│ /vackup-volume │   │
# └────────────────┘             │ └────────────────┘   │
#                                └──────────────────────┘
function cmd_export() {

    VOLUME_NAME="$2"
    FILE_NAME="$3"
    
    # Check parameters are set
    if [ -z "$VOLUME_NAME" ] || [ -z "$FILE_NAME" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    fi
    
    # Check docker volume exists
    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME";
    then
        echo "Error: Volume $VOLUME_NAME does not exist"
        exit 1
    fi

    # TODO: check if file exists on host, if it does
    # create a option for overwrite and check if that's set
    # TODO: if FILE_NAME starts with / we need to error out
    # unless we can translate full file paths


    if ! docker run --rm \
        -v "$VOLUME_NAME":/vackup-volume \
        -v "$(pwd)":/vackup \
        busybox \
        tar -zcvf /vackup/"$FILE_NAME" /vackup-volume;
    then
        echo "Error: Failed to start busybox backup container"
        exit 1
    fi

    echo "Successfully tar'ed volume $VOLUME_NAME into file $FILE_NAME"
}



# ╭──────────────────────────────────────────────────────────╮
# │                          IMPORT                          │
# ╰──────────────────────────────────────────────────────────╯
#
# 1. Create a BUSYBOX container
# 2. mount volume to    /vackup-volume
# 3. mount $pwd to      /vackup
# 4. extract contents of tar.gz into volume
#
#                                ┌──────────────────────┐
# ┌────────────────┐             │ ┌────────────────┐   │
# │       ./       │────mount────┼▶│    /vackup     │   │
# └────────────────┘             │ └──────────────┬─┘   │
#                                │                │     │
#                                │ busybox       tar -x │
#                                │                │     │
# ┌────────────────┐             │ ┌──────────────▼─┐   │
# │     volume     │────mount────┼▶│ /vackup-volume │   │
# └────────────────┘             │ └────────────────┘   │
#                                └──────────────────────┘
#
function cmd_import() {
    FILE_NAME="$2"
    VOLUME_NAME="$3"
    
    # Check parameters are set
    if [ -z "$VOLUME_NAME" ] || [ -z "$FILE_NAME" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    fi
    
    # Check docker volume exists
    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME";
    then
        echo "Error: Volume $VOLUME_NAME does not exist"
        docker volume create "$VOLUME_NAME"
    fi

    # TODO: check if file exists on host, if it does
    # create a option for overwrite and check if that's set
    # TODO: if FILE_NAME starts with / we need to error out
    # unless we can translate full file paths    

    if ! docker run --rm \
        -v "$VOLUME_NAME":/vackup-volume \
        -v "$(pwd)":/vackup \
        busybox \
        tar -xvzf /vackup/"$FILE_NAME" -C /; 
    then
        echo "Error: Failed to start busybox container"
        exit 1
    fi

    echo "Successfully unpacked $FILE_NAME into volume $VOLUME_NAME"
}


# ╭──────────────────────────────────────────────────────────╮
# │                           SAVE                           │
# ╰──────────────────────────────────────────────────────────╯
#
# 1. Mount volume to busybox
# 2. Copy contents to /volume-data/
# 3. Make an image of the container
# 4. Delete container
#
#                               ┌──────────────────────┐
# ┌────────────────┐            │  ┌────────────────┐  │
# │     volume     │────mount───┼─▶│ /vackup-volume │  │
# └────────────────┘            │  └──────────────┬─┘  │
#                               │                 │    │
#                               │ busybox      cp -Rp  │
#                               │                 │    │
#                               │ ┌───────────────▼┐   │
#                               │ │ /volume-data/  │   │
#                               │ └────────────────┘   │
#                               └──────────────────────┘
#                                           │           
#                                           ▼           
#                               ┌──────────────────────┐
#                               │  Image of Container  │
#                               └──────────────────────┘
#
function cmd_save() {
    VOLUME_NAME="$2"
    IMAGE_NAME="$3"

    # Check parameters are set
    if [ -z "$VOLUME_NAME" ] || [ -z "$IMAGE_NAME" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    fi

    # Check docker volume exists
    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; 
    then
        echo "Error: Volume $VOLUME_NAME does not exist"
        exit 1
    fi

    # Copy everything from volume to busybox container
    if ! docker run \
        -v "$VOLUME_NAME":/mount-volume \
        busybox \
        cp -Rp /mount-volume/. /volume-data/;
    then
        echo "Error: Failed to start busybox container"
        exit 1
    fi

    # Get latest container ID (hash)
    CONTAINER_ID=$(docker ps -lq)

    # Create a new Image
    docker commit -m "saving volume $VOLUME_NAME to /volume-data" "$CONTAINER_ID" "$IMAGE_NAME"

    # Delete the container
    docker container rm "$CONTAINER_ID"

    echo "Successfully copied volume $VOLUME_NAME into image $IMAGE_NAME, under /volume-data"
}


# ╭──────────────────────────────────────────────────────────╮
# │                           LOAD                           │
# ╰──────────────────────────────────────────────────────────╯
#
# 1. Create container of image
# 2. Mount volume to /mount-volume
# 3. Copy everything in /volume-data to /mount-volume
#
#                               ┌──────────────────────┐
# ┌────────────────┐            │  ┌────────────────┐  │
# │     volume     │────mount───┼─▶│ /mount-volume  │  │
# └────────────────┘            │  └──────────────▲─┘  │
#                               │                 │    │
#                               │ busybox      cp -Rp  │
#                               │                 │    │
#                               │ ┌───────────────┴┐   │
#                               │ │ /volume-data/  │   │
#                               │ └────────────────┘   │
#                               └──────────────────────┘
#                                           ▲           
#                                           │           
#                               ┌──────────────────────┐
#                               │  Image of Container  │
#                               └──────────────────────┘
#
cmd_load() {
    IMAGE_NAME="$2"
    VOLUME_NAME="$3"
    
    # Check parameters are set
    if [ -z "$VOLUME_NAME" ] || [ -z "$IMAGE_NAME" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    fi

    # Check docker volume exists
    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; 
    then
        echo "Volume $VOLUME_NAME does not exist, creating..."
        docker volume create "$VOLUME_NAME"
    fi
    
    # Copy everything from container into volume under /mount-volume
    if ! docker run --rm \
        -v "$VOLUME_NAME":/mount-volume \
        "$IMAGE_NAME" \
        cp -Rp /volume-data/. /mount-volume/; 
    then
        echo "Error: Failed to start container from $IMAGE_NAME"
        exit 1
    fi

    echo "Successfully copied /volume-data from $IMAGE_NAME into volume $VOLUME_NAME"
}


# ╭──────────────────────────────────────────────────────────╮
# │                          DBSAVE                          │
# ╰──────────────────────────────────────────────────────────╯
#
# 1. Run DB Container (with DB volume mounted)
# 2. MySQLDump database to current folder
# 3. Create new busybox container
# 4. Mount current dir to container
# 5. Copy dump file into container
# 6. Make image of container
#
#                                 ┌─────────────────────────┐
#                                 │     MySQL Container     │
# ┌──────────────────┐            │                         │
# │     DB Volume    │── mount ───┼───────▶ mysqldump       │
# └──────────────────┘            │             │           │
# ┌──────────────────┐            │ ┌───────────▼─────────┐ │
# │   ./backup.sql   │◀─── cp ────┼─│   /tmp/backup.sql   │ │
# └──────────────────┘            │ └─────────────────────┘ │
#           │                     └─────────────────────────┘
#           │                                                
#           │                     ┌─────────────────────────┐
#           │                     │         busybox         │
#           │                     │                         │
#           │                     │ ┌─────────────────────┐ │
#           └─────── mount ───────┼▶│ /vackup/backup.sql  │ │
#                                 │ └──────────┬──────────┘ │
#                                 │            │ cp -p      │
#                                 │            ▼            │
#                                 │ ┌─────────────────────┐ │
#                                 │ │ /db-data/backup.sql │ │
#                                 │ └─────────────────────┘ │
#                                 └─────────────────────────┘
#                                              │ commit      
#                                              ▼             
#                                  ┌──────────────────────┐  
#                                  │  Image of Container  │  
#                                  └──────────────────────┘  
#
function cmd_dbsave() {
    CONTAINER="$2"
    IMAGE_NAME="$3"
    DB_DATABASE="$4"
    DB_PASSWORD="$5"
    DB_USERNAME="root"

    # Check parameters are set
    if [ -z "$CONTAINER" ] || [ -z "$IMAGE_NAME" ] || [ -z "$DB_DATABASE" ] || [ -z "$DB_PASSWORD" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    fi

    # Check docker container exists
    if ! docker ps -a | grep "$CONTAINER" > /dev/null 2>&1; 
    then
        echo "Error: Container $CONTAINER does not exist"
        exit 1
    fi

    # Check docker container has mysql
    if ! docker exec $CONTAINER \
        mysqldump --version > /dev/null 2>&1; 
    then
        echo "Error: Container $CONTAINER does not have a MySQL database"
        exit 1
    fi

    # Dump Database to /tmp
    if ! docker exec $CONTAINER \
        mysqldump -u$DB_USERNAME -p$DB_PASSWORD --single-transaction $DB_DATABASE > /tmp/backup.sql > /dev/null 2>&1;
    then
        echo "Error: Failed to dump database to /tmp/backup.sql"
        exit 1
    fi

    # Copy backup file out of container
    if ! docker cp $CONTAINER:/tmp/backup.sql ./backup.sql;
    then
        echo "Error: Unable to copy $CONTAINER:/tmp/backup.sql to current folder."
        exit 1
    fi

    # Copy backup.sql file to busybox container
    if ! docker run \
        -v "$(pwd)":/vackup \
        busybox \
        /bin/sh -c "mkdir -p /db-data/ && cp -p /vackup/backup.sql /db-data/backup.sql" ;
    then
        echo "Error: Failed to start busybox container"
        exit 1
    fi

    # Get latest container ID (hash)
    CONTAINER_ID=$(docker ps -lq)

    # Create a new Image
    docker commit -m "saving DB from container $CONTAINER to /db-data/backup.sql" "$CONTAINER_ID" "$IMAGE_NAME"

    # Delete the container
    docker container rm "$CONTAINER_ID"

    echo "Successfully copied DB in container $CONTAINER into image $IMAGE_NAME, under /db-data"
}


# ╭──────────────────────────────────────────────────────────╮
# │                          DBLOAD                          │
# ╰──────────────────────────────────────────────────────────╯
#
# 1. Download DB data image
# 2. Copy the backup file out of image
# 3. Copy backup file into target container
# 4. Load backup into MySQL.
#
# ┌─────────────────────┐         ┌─────────────────────────┐
# │  Image with Backup  │────────▶│        Container        │
# └─────────────────────┘         │                         │
#                                 │ ┌─────────────────────┐ │
#                                 │ │ /db-data/backup.sql │ │
#                                 │ └─────────────────────┘ │
#                                 │            │            │
#                                 │            │  cp -p     │
#                                 │            ▼            │
# ┌───────────────────┐           │ ┌─────────────────────┐ │
# │        ./         │◀── mount ─┼─│/opt/mount/backup.sql│ │
# └───────────────────┘           │ └─────────────────────┘ │
#           │                     └─────────────────────────┘
#           │                                                
#           │                                                
#           │                     ┌─────────────────────────┐
#           │                     │     MySQL Container     │
#           │                     │ ┌─────────────────────┐ │
#           └───────cp────────────┼▶│   /tmp/backup.sql   │ │
#                                 │ └─────────────────────┘ │
#                                 │            │            │
#                                 │            │ mysql      │
#                                 │            ▼            │
# ┌──────────────────┐            │ ┌─────────────────────┐ │
# │     DB Volume    │◀──mounted──┼─│      DATABASE       │ │
# └──────────────────┘            │ └─────────────────────┘ │
#                                 └─────────────────────────┘
#
cmd_dbload() {
    IMAGE_NAME="$2"
    TARGET_CONTAINER="$3"
    DB_DATABASE="$4"
    DB_PASSWORD="$5"
    DB_USERNAME="root"
    
    # Check parameters are set
    if [ -z "$TARGET_CONTAINER" ] || [ -z "$IMAGE_NAME" ] || [ -z "$DB_DATABASE" ] || [ -z "$DB_PASSWORD" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    fi


    # Extract backup file out of image
    if ! docker run -v $PWD:/opt/mount --rm --entrypoint cp $IMAGE_NAME /db-data/backup.sql /opt/mount/backup.sql; 
    then
        echo "Error: Could not copy backup.sql file from Image $IMAGE_NAME."
        exit 1
    fi
    
    # Copy backup file into container
    if ! docker cp ./backup.sql $TARGET_CONTAINER:/tmp/backup.sql ;
    then
        echo "Error: Unable to copy backup.sql into $TARGET_CONTAINER:/tmp/backup.sql"
        exit 1
    fi

    # Load the Mysql Database
    if ! docker exec \
        $TARGET_CONTAINER \
        /bin/sh -c "cat /tmp/backup.sql | /usr/bin/mysql -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE > /dev/null 2>&1" ;
    then
        echo "Error: Failed to load SQL file into database."
        exit 1
    fi

    echo "Successfully loaded the SQL file from the $IMAGE_NAME image, into the $TARGET_CONTAINER DB container."
}




function main()
{

}

usage "$@"
arguments "$@"
main "$@"