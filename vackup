#!/bin/bash
# Docker Volume File Backup and Restore Tool
# Easily tar up a volume on a local (or remote) engine
# Inspired by CLIP from Lukasz Lach

set -Eeo pipefail

handle_error() {
  exit_code=$?
  if [ -n "${VACKUP_FAILURE_SCRIPT}" ]; then
    /bin/bash "${VACKUP_FAILURE_SCRIPT}" "$1" $exit_code
  fi
  exit $exit_code
}

trap 'handle_error $LINENO' ERR

usage() {
cat >&2 <<"EOF"

"Docker Volume Backup". Replicates image management commands for volumes.

export/import copies files between a host tarball and a volume. For making
  volume backups and restores.

save/load copies files between an image and a volume. For when you want to use
  image registries as a way to push/pull volume data.

Usage: vackup COMMAND [ARG..]; FILE args must have known suffixes:
  FILE = .{ tar[.{ gz | bz2 | xz | zst[d] }] | tgz | txz }

vackup export VOLUME FILE
  Create a (compressed) tarball in current directory from a volume.

vackup import FILE VOLUME
  Extract a tarball into a volume.

vackup save VOLUME IMAGE
  Copy volume contents to the /volume-data directory of a busybox image.

vackup load IMAGE VOLUME
  Copy /volume-data contents from an image to a volume.

Environment: $VACKUP_FAILURE_SCRIPT, $VACKUP_COMPRESS

EOF
}

msg() {  # args: exit_code msg
    printf >&2 '%s\n' "$2"
    return "$1"
}

if [ $# = 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    usage 2>&1  # print usage to stdout on request (unlike on error)
    exit 0
fi

detect_compression() {  # args: filename (de)compress-flag
    [ -z ${VACKUP_COMPRESS:-} ] || return 0
    case "$1" in
        (*.tar)  VACKUP_COMPRESS=cat ;;
        (*.gz)   VACKUP_COMPRESS=gzip ;;
        (*.tgz)  VACKUP_COMPRESS=gzip ;;
        (*.bz2)  VACKUP_COMPRESS=bzip2 ;;
        (*.xz)   VACKUP_COMPRESS=xz ;;
        (*.txz)  VACKUP_COMPRESS=xz ;;
        (*.zst)  VACKUP_COMPRESS=zstd ;;
        (*.zstd) VACKUP_COMPRESS=zstd ;;
        (*)
          msg 1 "Error: unknown extension ${1##*.}"
          ;;
    esac
    command -v "$VACKUP_COMPRESS" >/dev/null ||
      msg 1 "Error: $VACKUP_COMPRESS not available on host"
    [ "$VACKUP_COMPRESS" = cat ] || VACKUP_COMPRESS="$VACKUP_COMPRESS $2"
}

cmd_export() {
    if [ $# != 3 ]; then
        usage
        msg 1 "Error: wrong number of arguments"
    fi

    VOLUME_NAME=$2
    FILE_NAME=$3

    detect_compression "$FILE_NAME" -c

    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME" >/dev/null 2>&1
    then
        msg 1 "Error: Volume $VOLUME_NAME does not exist"
    fi

# TODO: check if file exists on host, if it does
# create a option for overwrite and check if that's set

    set -- docker run --rm \
      -v "$VOLUME_NAME":/vackup-volume \
      busybox \
      tar -cvf - /vackup-volume  # tar -vf - outputs list to stderr
    if ! "$@" | $VACKUP_COMPRESS >"$FILE_NAME"; then
        msg 1 "Error: Failed to start busybox backup container"
    fi

    msg 0 "Successfully tar'ed volume $VOLUME_NAME into file $FILE_NAME"
}

cmd_import() {
    if [ $# != 3 ]; then
        usage
        msg 1 "Error: wrong number of arguments"
    fi

    FILE_NAME=$2
    VOLUME_NAME=$3

    detect_compression "$FILE_NAME" -d

    if [ ! -r "$FILE_NAME" ]; then
        msg 1 "Error: Cannot open \"$FILE_NAME\""
    fi

    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME" >/dev/null 2>&1
    then
        msg 0 "Warning: Volume $VOLUME_NAME does not exist, will be created"
        docker volume create "$VOLUME_NAME"
    fi

    set -- docker run --rm -i \
      -v "$VOLUME_NAME":/vackup-volume \
      busybox \
      tar -xvf - -C /
    if ! $VACKUP_COMPRESS <"$FILE_NAME" | "$@" >&2; then
        msg 1 "Error: Failed to start busybox container"
    fi

    msg 0 "Successfully unpacked $FILE_NAME into volume $VOLUME_NAME"
}

cmd_save() {
    if [ $# != 3 ]; then
        usage
        msg 1 "Error: wrong number of arguments"
    fi

    VOLUME_NAME=$2
    IMAGE_NAME=$3

    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"
    then
        msg 1 "Error: Volume $VOLUME_NAME does not exist"
    fi

    if ! docker run \
      -v "$VOLUME_NAME":/mount-volume \
      busybox \
      cp -Rp /mount-volume/. /volume-data/
    then
        msg 1 "Error: Failed to start busybox container"
    fi

    CONTAINER_ID=$(docker ps -lq)

    docker commit -m "saving volume $VOLUME_NAME to /volume-data" "$CONTAINER_ID" "$IMAGE_NAME"

    docker container rm "$CONTAINER_ID"

    msg 0 "Successfully copied volume $VOLUME_NAME into image $IMAGE_NAME, under /volume-data"
}

cmd_load() {
    if [ $# != 3 ]; then
        usage
        msg 1 "Error: wrong number of arguments"
    fi

    IMAGE_NAME=$2
    VOLUME_NAME=$3

    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"
    then
      msg 0 "Volume $VOLUME_NAME does not exist, creating..."
      docker volume create "$VOLUME_NAME"
    fi

    if ! docker run --rm \
      -v "$VOLUME_NAME":/mount-volume \
      "$IMAGE_NAME" \
      cp -Rp /volume-data/. /mount-volume/
    then
        msg 1 "Error: Failed to start container from $IMAGE_NAME"
    fi

    msg 0 "Successfully copied /volume-data from $IMAGE_NAME into volume $VOLUME_NAME"
}

COMMAND=$1
case "$COMMAND" in
  (export) cmd_export "$@" ;;
  (import) cmd_import "$@" ;;
  (save) cmd_save "$@" ;;
  (load) cmd_load "$@" ;;
  (*)
      usage
      msg 1 "Error: Unknown operation $COMMAND"
      ;;
esac

exit 0
