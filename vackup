#!/bin/bash
# Docker Volume File Backup and Restore Tool
# Easily tar up a volume on a local (or remote) engine
# Inspired by CLIP from Lukasz Lach
# Better Code

set -Eeo pipefail

handle_error() {
  exit_code=$?
  if [ -n "${VACKUP_FAILURE_SCRIPT}" ]; then
    # Führen Sie Ihre benutzerdefinierte Fehlerbehandlung hier aus
    # Zum Beispiel: /bin/bash "${VACKUP_FAILURE_SCRIPT}" "$1" $exit_code
    echo "Error encountered on line $1 with exit code $exit_code"
  fi
  exit $exit_code
}

trap 'handle_error $LINENO' ERR

usage() {
cat <<EOF

"Docker Volume Backup". Replicates image management commands for volumes.

export/import copies files between a host tarball and a volume. For making
  volume backups and restores.

save/load copies files between an image and a volume. For when you want to use 
  image registries as a way to push/pull volume data.

Usage: 

vackup export VOLUME FILE
  Creates a gzip'ed tarball in the current directory from a volume

vackup import FILE VOLUME
  Extracts a gzip'ed tarball into a volume

vackup save VOLUME IMAGE
  Copies the volume contents to a specified image in the /volume-data directory

vackup load IMAGE VOLUME
  Copies /volume-data contents from a specified image to a volume

EOF
}

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    usage
    exit 0
fi

perform_backup() {
    VOLUME_NAME="$1"
    SOURCE="$2"
    TARGET="$3"

    if [ -z "$VOLUME_NAME" ] || [ -z "$SOURCE" ]; then
        echo "Error: Not enough arguments"
        usage
        exit 1
    }

    if ! docker volume inspect --format '{{.Name}}' "$VOLUME_NAME"; then
        echo "Error: Volume $VOLUME_NAME does not exist"
        docker volume create "$VOLUME_NAME"
    fi

    if ! docker run --rm \
      -v "$VOLUME_NAME":/vackup-volume \
      -v "$(pwd)":/vackup \
      busybox \
      tar -xvzf "$SOURCE" -C "$TARGET"; then
        echo "Error: Failed to start busybox container"
        exit 1
    }

    echo "Successfully backed up volume $VOLUME_NAME"
}

cmd_export() {
    VOLUME_NAME="$2"
    FILE_NAME="$3"
    
    perform_backup "$VOLUME_NAME" "$FILE_NAME" /vackup
    echo "Successfully tar'ed volume $VOLUME_NAME into file $FILE_NAME"
}

# Hier können Sie die anderen Funktionen für import, save und load anpassen.

COMMAND="$1"
case "$COMMAND" in
  export) cmd_export "$@" ;;
  import) cmd_import "$@" ;;
  save) cmd_save "$@" ;;
  load) cmd_load "$@" ;;
esac

exit 0
