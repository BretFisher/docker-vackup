#!/bin/bash
# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                                  VARIABLES                                   ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝


CONTAINER_REGISTRY="thirtythree.azurecr.io/sites"

# Deine all spinnaker icons / colours
function stylesheet()
{
    TEXT_WHITE_FFF='\e[38;2;255;255;255m'
    TEXT_STONE_500='\e[38;2;120;113;108m'
    TEXT_STONE_600='\e[38;2;87;83;78m'
    TEXT_ORANGE_500='\e[38;2;249;115;22m'
    TEXT_YELLOW_500='\e[38;2;234;179;8m'
    TEXT_GRAY_200='\e[38;2;229;231;235m'
    TEXT_GRAY_400='\e[38;2;156;163;175m'
    TEXT_GRAY_500='\e[38;2;107;114;128m'
    TEXT_GRAY_600='\e[38;2;75;85;99m'
    TEXT_GRAY_700='\e[38;2;55;65;81m'
    TEXT_VIOLET_500='\e[38;2;139;92;246m'
    TEXT_RED_500='\e[38;2;239;68;68m'
    TEXT_GREEN_500='\e[38;2;34;197;94m'
    TEXT_EMERALD_500='\e[38;2;16;185;129m'
    TEXT_TEAL_500='\e[38;2;20;184;166m'
    TEXT_SKY_500='\e[38;2;14;165;233m'
    TEXT_AMBER_500='\e[38;2;245;158;11m'
    RESET_TEXT='\e[39m'
    RESET_ALL='\e[0m\e[39m\e[49m\033[0m\033[K'
    ICON_FADE_200=░
    ICON_CMD=⌘
    ICON_ARROW_N=↑
    ICON_ARROW_S=↓
    ICON_ARROW_E=→
    ICON_ARROW_W=←
    ICON_CIRCLE=●
    ICON_TICK=✅
    ICON_CROSS=❌
    BORDER_SKY_400='\e[38;2;56;189;248m'
    BORDER_EMERALD_400='\e[38;2;52;211;153m'
    BORDER_PINK_400='\e[38;2;244;114;182m'
    BORDER_ROSE_400='\e[38;2;251;113;133m'
    BORDER_FUCHSIA_400='\e[38;2;232;121;249m'
    BORDER_PURPLE_400='\e[38;2;192;132;252m'
    BORDER_INDIGO_400='\e[38;2;129;140;248m'
    BORDER_BLUE_400='\e[38;2;96;165;250m'
    BORDER_CYAN_400='\e[38;2;34;211;238m'
    BORDER_TEAL_400='\e[38;2;45;212;191m'
    BORDER_GREEN_400='\e[38;2;74;222;128m'
    BORDER_YELLOW_400='\e[38;2;250;204;21m'
    BORDER_ORANGE_400='\e[38;2;251;146;60m'
    BORDER_RED_400='\e[38;2;248;113;113m'
}


# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                                MENU FUNCTIONS                                ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝

function mainmenu()
{
    
    MENU='
        {
        "select": {
            "heading": "'${TEXT_YELLOW_500}'Select the task to perform.",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "exit",
            "options": [
                {
                    "title": "Save ⏩ ",
                    "title_style": "",
                    "description": "Export data out of docker.",
                    "description_style": "TEXT_GRAY_500",
                    "command": "save_option; exit",
                    "bullet": "BORDER_SKY_400"
                },
                {
                    "title": "Load ⏪ ",
                    "title_style": "",
                    "description": "Import data back into docker.",
                    "description_style": "TEXT_GRAY_500",
                    "command": "load_option; exit",
                    "bullet": "BORDER_EMERALD_400"
                }
            ]
        }
    }'
    menu "$MENU"

}


function save_option()
{
    MENU='
        {
        "select": {
            "heading": "'${TEXT_YELLOW_500}'How would you like to export data?",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "mainmenu",
            "options": [
                {
                    "title": "🗄 Volume → 🗜 tar.gz",
                    "title_style": "",
                    "description": "Export contents of a docker volume into a tar.gz file in current directory on host.",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_export; exit",
                    "bullet": "BORDER_SKY_400"
                },
                {
                    "title": "🗄 Volume → 🏞 backup image",
                    "title_style": "",
                    "description": "Save contents of a docker volume into a docker container image ready to push to registry",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_save; exit",
                    "bullet": "BORDER_PINK_400"
                },
                {
                    "title": "🛢 MySQL Container → 🏞 backup image",
                    "title_style": "",
                    "description": "Save MySQL dump on container to a backup image",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_dbsave; exit",
                    "bullet": "BORDER_FUCHSIA_400"
                },
                {
                    "title": "🛢 MySQL Container → 🏞 backup image → 🗂 container registry",
                    "title_style": "",
                    "description": "Save MySQL dump to push to container registry",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_dbsave; push_to_registry; exit",
                    "bullet": "BORDER_FUCHSIA_400"
                }
            ]
        }
    }'
    menu "$MENU"
}


function load_option()
{
    MENU='
        {
        "select": {
            "heading": "'${TEXT_YELLOW_500}'How would you like to import data?",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "mainmenu",
            "options": [
                {
                    "title": "🗜 tar.gz → 🗄 Volume",
                    "title_style": "",
                    "description": "Import contents of a tar.gz file into a specific docker volume.",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_import",
                    "bullet": "BORDER_EMERALD_400"
                },
                {
                    "title": "🏞 backup image → 🗄 Volume",
                    "title_style": "",
                    "description": "Load contents of backup docker image into a specific docker volume.",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_load",
                    "bullet": "BORDER_ROSE_400"
                },
                {
                    "title": "🏞 backup image → 🛢 MySQL Container",
                    "title_style": "",
                    "description": "Load contents of a database backup image into a docker container MySQL database.",
                    "description_style": "TEXT_GRAY_500",
                    "command": "cmd_dbload",
                    "bullet": "BORDER_TEAL_400"
                }
            ]
        }
    }'
    menu "$MENU"
}




# ╭──────────────────────────────────────────────────────────╮
# │          Select a docker container from a list           │
# ╰──────────────────────────────────────────────────────────╯
function select_container()
{
    
    LIST_OF_CONTAINERS=$(docker container ls -a --format='{{.ID}} {{.Names}} {{.Image}}')

    MENU='
        {
        "select": {
            "heading": "'${BORDER_YELLOW_400}'Select the container.",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "mainmenu",
            "options": ['

    LOOP=1
    while IFS= read -r line; do

        CONTAINER_ID=$(echo $line | head -n1 | cut -d " " -f1 | xargs )
        CONTAINER_NAME=$(echo $line | head -n1 | cut -d " " -f2 | xargs )
        CONTAINER_IMAGE=$(echo $line | head -n1 | cut -d " " -f3 | xargs )

        MENU+='
                {
                    "title": "'${CONTAINER_NAME}'",
                    "title_style": "",
                    "description": "'${TEXT_GRAY_700}${CONTAINER_ID}' '${TEXT_GRAY_600}${CONTAINER_NAME}'",
                    "description_style": "TEXT_GRAY_500",
                    "command": "CONTAINER=\"'${CONTAINER_NAME}'\" ",
                    "bullet": "BORDER_FUCHSIA_400"
                },'

        LOOP=$(( LOOP+1 ))
    done <<< "$LIST_OF_CONTAINERS"

    MENU+='
            ]
        }
    }'
    
    menu "$MENU"
}

# ╭──────────────────────────────────────────────────────────╮
# │             Select a docker volume from list             │
# ╰──────────────────────────────────────────────────────────╯
function select_volume()
{

    LIST_OF_VOLUMES=$(docker volume ls --format='{{lower .Name}} {{lower .Mountpoint}}')

    MENU='
        {
        "select": {
            "heading": "'${BORDER_YELLOW_400}'Select the Volume.",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "mainmenu",
            "options": ['

    LOOP=1
    while IFS= read -r line; do

        VOLUME_NAME=$(echo $line | head -n1 | cut -d " " -f1 | xargs )
        VOLUME_MOUNTPOINT=$(echo $line | head -n1 | cut -d " " -f2 | xargs )

        MENU+='
                {
                    "title": "'${VOLUME_NAME}'",
                    "title_style": "",
                    "description": "Mountpoint: '${VOLUME_MOUNTPOINT}'",
                    "description_style": "TEXT_GRAY_500",
                    "command": "VOLUME=\"'${VOLUME_NAME}'\" ",
                    "bullet": "BORDER_SKY_400"
                },'

        LOOP=$(( LOOP+1 ))
    done <<< "$LIST_OF_VOLUMES"

    MENU+='
            ]
        }
    }'
    
    menu "$MENU"

}


# ╭──────────────────────────────────────────────────────────╮
# │              Select a docker image for list              │
# ╰──────────────────────────────────────────────────────────╯
function select_image()
{

    LIST_OF_IMAGES=$(docker image ls --format='{{lower .ID}} {{lower .Repository}} {{lower .Size}} {{lower .Tag}}')

    MENU='
        {
        "select": {
            "heading": "'${BORDER_YELLOW_400}'Select the Image.",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "mainmenu",
            "options": ['

    LOOP=1
    while IFS= read -r line; do

        IMAGE_ID=$(echo $line | head -n1 | cut -d " " -f1 | xargs )
        IMAGE_REPOSITORY=$(echo $line | head -n1 | cut -d " " -f2 | xargs )
        IMAGE_SIZE=$(echo $line | head -n1 | cut -d " " -f3 | xargs )
        IMAGE_TAG=$(echo $line | head -n1 | cut -d " " -f4 | xargs )

        MENU+='
                {
                    "title": "'${IMAGE_REPOSITORY}'",
                    "title_style": "",
                    "description": "ID: '${TEXT_GRAY_500}${IMAGE_ID}${TEXT_GRAY_700}' TAG: '${TEXT_GRAY_500}${IMAGE_TAG}${TEXT_GRAY_700}' SIZE: '${TEXT_GRAY_500}${IMAGE_SIZE}${TEXT_GRAY_700}'",
                    "description_style": "TEXT_GRAY_700",
                    "command": "IMAGE=\"'${IMAGE_ID}'\" ",
                    "bullet": "TEXT_GREEN_500"
                },'

        LOOP=$(( LOOP+1 ))
    done <<< "$LIST_OF_IMAGES"

    MENU+='
            ]
        }
    }'
    
    menu "$MENU"
}


# ╭──────────────────────────────────────────────────────────╮
# │           Select a docker database from a list           │
# ╰──────────────────────────────────────────────────────────╯
function select_database()
{
    
    LIST_OF_DATABASES=$(docker exec $CONTAINER mysql -u$DB_USERNAME -p$DB_PASSWORD --silent --execute="show databases;" )

    MENU='
        {
        "select": {
            "heading": "'${BORDER_YELLOW_400}'Select the database.",
            "clear": true,
            "clear_before_command": true,
            "icon": "ICON_FADE_200",
            "hide_message": true,
            "display_help": true,
            "reset_loop": false,
            "previous_step": "mainmenu",
            "options": ['

    LOOP=1
    while IFS= read -r line; do

        MENU+='
                {
                    "title": "'${line}'",
                    "title_style": "",
                    "description": "Option '${LOOP}'",
                    "description_style": "TEXT_GRAY_500",
                    "command": "DB_DATABASE=\"'${line}'\" ",
                    "bullet": "BORDER_TEAL_400"
                },'

        LOOP=$(( LOOP+1 ))
    done <<< "$LIST_OF_DATABASES"

    MENU+='
            ]
        }
    }'
    
    menu "$MENU"
}


# ╭──────────────────────────────────────────────────────────╮
# │                      Ask a question                      │
# ╰──────────────────────────────────────────────────────────╯
function ask_question()
{

    QUESTION=$1

    printf "${BORDER_YELLOW_400}%s${RESET_TEXT}\n\n " "$QUESTION"

    printf "${TEXT_SKY_500}"
    read -p "${ICON_FADE_200} " ANSWER
    printf "${RESET_TEXT}\n"
}



# ╭──────────────────────────────────────────────────────────╮
# │                  Check Y/n to continue                   │
# ╰──────────────────────────────────────────────────────────╯
function confirmation()
{
    QUESTION=$1
    printf "${TEXT_AMBER_500} %s ${RESET_TEXT}\n" "$QUESTION"
    read -r -p "Are you sure? [y/N] " response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            CONFIRM="YES"
            ;;
        *)
            CONFIRM=""
            exit
            ;;
    esac
}

# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                                MAIN FUNCTIONS                                ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝

# ╭──────────────────────────────────────────────────────────╮
# │                          EXPORT                          │
# ╰──────────────────────────────────────────────────────────╯
function cmd_export() {
    clear
    select_volume "Select volume to EXPORT from"
    VOLUME_NAME="$VOLUME"
    ask_question "Filename to export to? "
    FILE_NAME="$ANSWER"
    confirmation "You are going to export volume '${VOLUME_NAME}' to a file ${FILE_NAME}"
    spin "vump_export" "Exporting" "vump_export" 
}

function vump_export()
{
    vump --export --volume $VOLUME_NAME --filename $FILE_NAME
}



# ╭──────────────────────────────────────────────────────────╮
# │                          IMPORT                          │
# ╰──────────────────────────────────────────────────────────╯
function cmd_import() {
    clear
    ask_question "Filename to import from? "
    FILE_NAME="$ANSWER"
    select_volume "Select Volume to IMPORT into."
    VOLUME_NAME="$VOLUME"
    confirmation "You are about to import the data in the file ${FILE_NAME} into the volume '${VOLUME_NAME}'"
    spin "vump_import" "Importing" "vump_import"
}

function vump_import()
{
    vump --import --filename $FILE_NAME --volume $VOLUME_NAME
}

# ╭──────────────────────────────────────────────────────────╮
# │                           SAVE                           │
# ╰──────────────────────────────────────────────────────────╯
function cmd_save() {
    clear
    select_volume "Select Volume to save into a backup image."
    VOLUME_NAME="$VOLUME"
    ask_question "Name to give backup image? "
    IMAGE_NAME="$ANSWER"
    confirmation "You are about to save the data in the volume '${VOLUME_NAME}' into a container image called '${IMAGE_NAME}' "
    spin "vump_save" "Saving" "vump_save"
}

function vump_save()
{
    vump --save --volume $VOLUME_NAME --image $IMAGE_NAME 
}

# ╭──────────────────────────────────────────────────────────╮
# │                           LOAD                           │
# ╰──────────────────────────────────────────────────────────╯
cmd_load() {
    clear
    select_image "Select backup image to load data from."
    IMAGE_NAME="$IMAGE"
    select_volume "Select volume to load data into."
    VOLUME_NAME="$VOLUME"
    confirmation "You are about to load the contents of the container image called '${IMAGE_NAME}' into the volume '${VOLUME_NAME}'"
    spin "vump_load" "Loading" "vump_load"
}

function vump_load()
{
    vump --load --image $IMAGE_NAME --volume $VOLUME_NAME
}


# ╭──────────────────────────────────────────────────────────╮
# │                          DBSAVE                          │
# ╰──────────────────────────────────────────────────────────╯
function cmd_dbsave() {
    clear
    select_container "Select MySQL Container to backup."
    CONTAINER="$CONTAINER"
    ask_question "Name to give backup image? "
    IMAGE_NAME="$ANSWER"
    ask_question "database username? "
    DB_USERNAME="$ANSWER"
    ask_question "$DB_USERNAME database password? "
    DB_PASSWORD="$ANSWER"
    select_database "Select database to backup. "
    DB_DATABASE="$DB_DATABASE"

    printf "${TEXT_GRAY_500}CONTAINER: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n" "$CONTAINER"
    printf "${TEXT_GRAY_500}IMAGE_NAME: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n" "$IMAGE_NAME"
    printf "${TEXT_GRAY_500}DB_DATABASE: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n" "$DB_DATABASE"
    printf "${TEXT_GRAY_500}DB_USERNAME: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n\n\n" "$DB_USERNAME"

    confirmation "You are about to create a backup of database '${DB_DATABASE}' in container '${CONTAINER}' into an image called '${IMAGE_NAME}' "
    spin "vump_dbsave" "Loading" "vump_dbsave"
}

vump_dbsave()
{
    vump --dbsave --database $DB_DATABASE --username $DB_USERNAME --password $DB_PASSWORD --container $CONTAINER --image $IMAGE_NAME
}

# ╭──────────────────────────────────────────────────────────╮
# │                          DBLOAD                          │
# ╰──────────────────────────────────────────────────────────╯
#
# Loads a database from a backup image into a Volume.
#
# 1. Download DB data image
# 2. Copy the backup file out of image
# 3. Copy backup file into target container
# 4. Load backup into MySQL.
#
# ┌─────────────────────┐         ┌─────────────────────────┐
# │  Image with Backup  │────────▶│        Container        │
# └─────────────────────┘         │                         │
#                                 │ ┌─────────────────────┐ │
#                                 │ │ /db-data/backup.sql │ │
#                                 │ └─────────────────────┘ │
#                                 │            │            │
#                                 │            │  cp -p     │
#                                 │            ▼            │
# ┌───────────────────┐           │ ┌─────────────────────┐ │
# │        ./         │◀── mount ─┼─│/opt/mount/backup.sql│ │
# └───────────────────┘           │ └─────────────────────┘ │
#           │                     └─────────────────────────┘
#           │                                                
#           │                                                
#           │                     ┌─────────────────────────┐
#           │                     │     MySQL Container     │
#           │                     │ ┌─────────────────────┐ │
#           └───────cp────────────┼▶│   /tmp/backup.sql   │ │
#                                 │ └─────────────────────┘ │
#                                 │            │            │
#                                 │            │ mysql      │
#                                 │            ▼            │
# ┌──────────────────┐            │ ┌─────────────────────┐ │
# │     DB Volume    │◀──mounted──┼─│      DATABASE       │ │
# └──────────────────┘            │ └─────────────────────┘ │
#                                 └─────────────────────────┘
#
cmd_dbload() {
    clear
    select_image "Select database image to load data from. "
    IMAGE_NAME="$IMAGE"
    select_container "Select MySQL container to load data into. "
    TARGET_CONTAINER="$CONTAINER"
    ask_question "Name of database to load? "
    DB_DATABASE="$ANSWER"
    ask_question "database username? "
    DB_USERNAME="$ANSWER"
    ask_question "$DB_USERNAME database password? "
    DB_PASSWORD="$ANSWER"

    printf "${TEXT_GRAY_500}CONTAINER: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n" "$CONTAINER"
    printf "${TEXT_GRAY_500}IMAGE_NAME: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n" "$IMAGE_NAME"
    printf "${TEXT_GRAY_500}DB_DATABASE: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n" "$DB_DATABASE"
    printf "${TEXT_GRAY_500}DB_USERNAME: ${TEXT_EMERALD_500}%s${RESET_TEXT}\n\n\n" "$DB_USERNAME"

    confirmation "You are about to load the mysqldump file on the container image '${IMAGE_NAME}' into the database in the container '${CONTAINER}'"
    spin "vump_dbload" "Loading" "vump_dbload"
}

function vump_dbload()
{
    vump --dbload --database $DB_DATABASE --username $DB_USERNAME --password $DB_PASSWORD --container $CONTAINER --image $IMAGE_NAME

}



# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                              REGISTRY FUNCTIONS                              ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝


# ╭──────────────────────────────────────────────────────────╮
# │       Push the new image to the container registry       │
# ╰──────────────────────────────────────────────────────────╯
function push_to_registry()
{
    clear

    IMAGE_ID=$(docker image ls -q --filter reference=${IMAGE_NAME})

    printf "${TEXT_RED_500} (you must be logged in with 'docker login' or 'az login acr')${RESET_TEXT}\n\n"

    printf "The image $IMAGE_NAME:latest will be pushed to the following locations:\n"
    printf "${ICON_CIRCLE} ${TEXT_GREEN_500}$CONTAINER_REGISTRY/$IMAGE_NAME:latest ${RESET_TEXT} \n"
    printf "${ICON_CIRCLE} ${TEXT_GREEN_500}$CONTAINER_REGISTRY/$IMAGE_NAME:$IMAGE_ID ${RESET_TEXT} \n\n"
    confirmation "Do you want to push image to container registry?"

    printf "\n"

    # Tag :Latest
    if ! docker image tag ${IMAGE_NAME}:latest ${CONTAINER_REGISTRY}/${IMAGE_NAME}:latest;
    then
        printf "\n${TEXT_RED_500}Error: Failed to tag image ${IMAGE_NAME}:latest as ${CONTAINER_REGISTRY}/${IMAGE_NAME}:latest.\n"
        exit 1
    fi

    # Push :Latest
    PUSH_IMAGE="${IMAGE_NAME}"
    PUSH_TAG="latest"
    spin "docker_push_to_registry" "pushing :latest to registry" "push to registry"

    # Tag :IMAGE_ID
    if ! docker image tag ${CONTAINER_REGISTRY}/${IMAGE_NAME}:latest ${CONTAINER_REGISTRY}/${IMAGE_NAME}:${IMAGE_ID};
    then
        printf "\n${TEXT_RED_500}Error: Failed to tag image with image ID.\n"
        exit 1
    fi

    # Push :IMAGE_ID
    PUSH_IMAGE="${IMAGE_NAME}"
    PUSH_TAG="${IMAGE_ID}"
    spin "docker_push_to_registry" "pushing :${IMAGE_ID} to registry" "push to registry"
}


# Push to the registry.
function docker_push_to_registry()
{
    if ! docker push ${CONTAINER_REGISTRY}/${PUSH_IMAGE}:${PUSH_TAG};
    then
        printf "\n${TEXT_RED_500}Error: Failed to push ${PUSH_REGISTRY}/${PUSH_IMAGE}:${PUSH_TAG} to container registry.\n"
        exit 1
    fi
}


source ./inc/menu_builder
source ./inc/spinner

stylesheet
mainmenu